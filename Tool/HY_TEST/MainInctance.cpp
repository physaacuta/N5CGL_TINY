#include "StdAfx.h"
#include "MainInctance.h"

// メモリーリーク検出 ----->>>
#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif
// <<<------------------------

//------------------------------------------
// コンストラクタ
//------------------------------------------
MainInctance::MainInctance(void) :
ThreadManager("MI")
{
	// シグナル生成
	m_evThStart  = CreateEvent(NULL, FALSE, FALSE, NULL);				// メインスレッド同期用
}
//------------------------------------------
// デストラクタ
//------------------------------------------
MainInctance::~MainInctance(void)
{
	// シグナル開放
	CloseHandle(m_evThStart);
}

//------------------------------------------
// スレッドキューにメールデータ登録
// ENUM_MAININCTANCE emNo メッセージNo (イベントNoそのままにしようかと思ったが、FACT??_01とかだと分かりにくいからやめた)
// COMMON_QUE* que メールスロット構造体そのもの
//------------------------------------------
void MainInctance::SetDeliveryMail(ENUM_MAININCTANCE emNo, COMMON_QUE* que)
{
	DELIVERY_MAIL* pMail = new DELIVERY_MAIL;
	pMail->emNo	= emNo;
	memcpy( &pMail->que, que, sizeof(COMMON_QUE));

	// スレッドキューに登録
	if( ! mque_DeliMail.AddToTailFreeCheck(pMail) ) {
		delete pMail;
		LOG(em_ERR), "[%s] mque_DeliMail キューフル!!", my_sThreadName);
	}
}

//------------------------------------------
// 初期化処理 (一度のみ起動)
//------------------------------------------
BOOL MainInctance::Init()
{
	//// メインインスタンスのみ、スレッドだけは作っておく (すぐに非シグナルとする)
	//// 継承元クラス実行 (メイン制御スレッドの為、ちょっと優先度高め)
	ThreadManager::Start(THREAD_PRIORITY_ABOVE_NORMAL );

	// スレッドIDが割りつくまでちょっと休憩
	while( 0==GetTid() ) {
		LOG(em_MSG), "[%s] スレッドID割り当て中・・・", my_sThreadName);
		Sleep(1);			// スレッド起動までちょっと待ち
	}

	////////////////////////////////////
	//// パラメータ読込待ち
	////////////////////////////////////
	// パラメータ管理クラス
	gcls_pParam = new ParamManager();
	gcls_pParam->SetLogMgr(mcls_pLog);
	while( true ) {
		if( gcls_pParam->ReadParam_All(true) ) break;

		LOG(em_MSG), "[%s] パラメータ読込失敗(DB接続異常？！)。リトライ中・・・", my_sThreadName);
		Sleep(10000);			
	}


	////////////////////////////////////
	//// ワーカースレッド 初期化
	////////////////////////////////////

	gcls_pSend = new KizuOpSend(HY_DEFECT);
	gcls_pSend->SetLogMgr(mcls_pLog);

	gcls_pImgSend = new ImgSendManager();
	gcls_pImgSend->SetLogMgr(mcls_pLog);
	gcls_pImgSend->SetOpSend(gcls_pSend);
	gcls_pImgSend->SetParamMgr(gcls_pParam);

	// 前工程情報管理
	gcls_pMaeMgr = new TestMaeManager();
	gcls_pMaeMgr->SetLogMgr(mcls_pLog);

	// テスト管理
	gcls_pTest = new TestManager();
	gcls_pTest->SetLogMgr(mcls_pLog);
	gcls_pTest->SetParamMgr(gcls_pParam);
	gcls_pTest->SetOpSend(gcls_pSend);
	gcls_pTest->SetImgSend(gcls_pImgSend);
	gcls_pTest->SetMaeMgr(gcls_pMaeMgr);


	////////////////////////////////////
	//// ワーカースレッド 起動
	////////////////////////////////////
	gcls_pSend->Start();
	gcls_pTest->Start();
	gcls_pImgSend->Start();
	gcls_pMaeMgr->Start();

	return TRUE;
}

//------------------------------------------
// 終了処理 (一度のみ起動)
//------------------------------------------
void MainInctance::Exit()
{

	//// ワーカースレッド 停止
	gcls_pTest->Stop();
	gcls_pSend->Stop();
	gcls_pParam->Stop();
	gcls_pImgSend->Stop();
	gcls_pMaeMgr->Stop();

	//// ワーカースレッド 開放
	delete gcls_pTest;
	delete gcls_pSend;
	delete gcls_pParam;
	delete gcls_pImgSend;
	delete gcls_pMaeMgr;

}

//------------------------------------------
// スレッド開始前処理 (スレッド実行直後(シグナルセット前)にコールバック)
//------------------------------------------
int MainInctance::ThreadFirst()
{
	////// 他ワークスレッドの準備が整うまで待機 (MainInctanceのみ)
	LOG(em_MSG), "[%s] 他ワークスレッドの準備が整うまで待機中・・・ [0x%X]", my_sThreadName, GetTid() );
	WaitForSingleObject(m_evThStart, INFINITE);

//*/
	//// イベント設定
	HANDLE hArray[] = { mque_DeliMail.g_evSem
						};
	SetEventNum(sizeof(hArray)/sizeof(HANDLE), hArray);
//*/
	return 0;
}

//------------------------------------------
// スレッドイベント発生
// int nEventNo イベントNo (0オリジン)
//------------------------------------------
void MainInctance::ThreadEvent(int nEventNo)
{
	DELIVERY_MAIL* pMail;

	////// シグナルの条件
	enum {	EV_MAIL = 0,				// メールスロット 通知 (メールは一番最後にしようかな)
	};

	////// シグナル条件分け
	switch (nEventNo) {

//-----------------------------------------------------------------------------------------------
	case EV_MAIL: 						// メールスロット 通知
		pMail = mque_DeliMail.GetFromHead();
		switch(pMail->emNo) {

//-----------------------------------------------------------
		case 1:
			break;


//-----------------------------------------------------------
		}
		// 開放
		delete pMail;
		return;

//-----------------------------------------------------------------------------------------------
	default :
		// ありえない！！
		LOG(em_ERR), "[%s] ThreadEvent EventNo NG=%d", my_sThreadName, nEventNo );
		return;
	}
}

