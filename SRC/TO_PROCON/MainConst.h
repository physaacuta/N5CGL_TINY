// *********************************************************************************
//	当タスクの基本定数
//	[Ver]
//		Ver.01    2007/08/03  vs2005 対応
//
//	[メモ]
//		
// *********************************************************************************

#pragma once

//#define tDEBUG																	// デバック時 コメントアウト
// バイト反転有り（1、5CGL、1CAPL）
// バイト反転無し（2CGL、5CGL極微小）
//#define BYTE_HANTEN					// バイト反転有無（コメント化されている時は、バイト反転無し）


//=======================================
// 自クラスの定数
//=======================================
#define	MYID_KIKI				"PROCON_ID"										// プロコン通信用の機器ID


//=======================================
// 送信依頼キュー
//=======================================
//// 送信依頼
enum QUE_STAT {
//		QUE_HEALTHY_SNED = 0,		// ヘルシー伝文
//		QUE_TEST_SNED,				// テスト伝文
	QUE_ZISEKI_SEND = 0,			// 疵実績伝文
	QUE_DEBUG_SEND					// [DEBUG] 疵実績伝文
};
//// 受け渡し構造体
typedef struct{
	QUE_STAT				eStat;						// 要求モード
	BYTE*					pData;						// 送信するバイナリデータ

	char					cKey[SIZE_SERIAL_FF_NO];	// 送信するキー
	int						nSize;						// 送信サイズ
	int						nTc;						// トランザクションコード
} Delivery;


//=======================================
// メッセージ通知
//=======================================
//// 全てMainInctanceで受ける
//       場合によっては、MainInctanceが各ワーカースレッドにたれ流しする
enum ENUM_MAININCTANCE {
	E_DEF_ML_PARAM = WM_USER + 100,						// パラメータ変更通知
	E_DEF_DEBUG_RECV,									// デバック用伝文受信通知

	E_DEF_END											// 終了
};

