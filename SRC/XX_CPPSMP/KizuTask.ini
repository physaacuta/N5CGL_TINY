#////////////////////////////////////////////////////////////////////
# 機能単位の設定ファイル
#  ※ 名前の付け方 [t統括機能 kizuTask.ini]
#////////////////////////////////////////////////////////////////////

#**************************************************************************************
# ライブラリ使用 部
#**************************************************************************************
#=========================================================
# データベース情報
#  DBADDLESS	: DB接続アドレス (VBでしか使用しない)
#  ODBCNAME	: ODBCの名称 (C のみ使用)
#  DSNAME	: SQLServerのDB名称(VB のみ使用)
#  USERID	: ユーザー名
#  PASSWORD	: パスワード
#=========================================================
# オンライン実行中DB
[DB]
DBADDLESS=192.9.200.230
ODBCNAME =DATABASE_KIZUSHARE
DSNAME   =DATABASE_KIZUSHARE
USERID   =sa
PASSWORD =nsc
# A系DB
[DB_A]
DBADDLESS= 192.9.200.230
ODBCNAME = DATABASE_KIZUSHARE
DSNAME   = DATABASE_KIZUSHARE
USERID   = sa
PASSWORD = nsc



#=========================================================
# 共通設定
#  LINEID	: ライン区分(コンパイル無しでタスクの切替等で使用可能) (0:5CLG  1:1CGL  2:1CAPL)
#  NOA		: NOA接続フラグ (0:オンライン  1:遠隔  9:デバック)
#=========================================================
[COMMON]
LINEID = 1
NOA = 9

#=========================================================
# 機器ID定義
#  各機能での機器IDを定義 (共通支援機能での機器IDは除く)
#=========================================================
[STATUS]
#判定PC01応答無し
HANTEI_ANS_1_ID = 93
HANTEI_ANS_2_ID = 94
HANTEI_ANS_3_ID = 95
HANTEI_ANS_4_ID = 96
HANTEI_ANS_5_ID = 97
HANTEI_ANS_6_ID = 98
HANTEI_ANS_7_ID = 99
HANTEI_ANS_8_ID = 100
HANTEI_ANS_9_ID = 101
HANTEI_ANS_10_ID = 102
HANTEI_ANS_11_ID = 103
HANTEI_ANS_12_ID = 104
#判定PC 異常発生（バックアップも不可能）
HANTEI_TOP_ANS_ID=105
HANTEI_BOT_ANS_ID=106

#照明装置 電球切れ
LIGHT_BREAK_TOP_1_ID = 123
LIGHT_BREAK_TOP_2_ID = 124
LIGHT_BREAK_TOP_3_ID = 125
LIGHT_BREAK_TOP_4_ID = 126
LIGHT_BREAK_BOT_1_ID = 127
LIGHT_BREAK_BOT_2_ID = 128
LIGHT_BREAK_BOT_3_ID = 129
LIGHT_BREAK_BOT_4_ID = 130
#電球劣化
LIGHT_VOLMIN_TOP_1_ID = 131
LIGHT_VOLMIN_TOP_2_ID = 132
LIGHT_VOLMIN_TOP_3_ID = 133
LIGHT_VOLMIN_TOP_4_ID = 134
LIGHT_VOLMIN_BOT_1_ID = 135
LIGHT_VOLMIN_BOT_2_ID = 136
LIGHT_VOLMIN_BOT_3_ID = 137
LIGHT_VOLMIN_BOT_4_ID = 138
#現在光量値
LIGHT_VOLNOW_TOP_1_ID = 139
LIGHT_VOLNOW_TOP_2_ID = 140
LIGHT_VOLNOW_TOP_3_ID = 141
LIGHT_VOLNOW_TOP_4_ID = 142
LIGHT_VOLNOW_BOT_1_ID = 143
LIGHT_VOLNOW_BOT_2_ID = 144
LIGHT_VOLNOW_BOT_3_ID = 145
LIGHT_VOLNOW_BOT_4_ID = 146
#照明光量不足
LIGHT_TOTALMIN_TOP_ID = 147
LIGHT_TOTALMIN_BOT_ID = 148
#照明装置状態
LIGHT_LINE_TOP_ID = 149
LIGHT_LINE_BOT_ID = 150
#照明装置 温度異常
LIGHT_TEMP_TOP_ID=151
LIGHT_TEMP_BOT_ID=152
#カメラコントローラー
CAMCONTROL_ID=153
#プロコン通信
PROCON_ID=154
#FF送信
FFSERV_ID = 155
#カウンターボード
BOOD_CNT_ID=156
#PIOボード
BOOD_PIO_ID=157
#対シーケンサ通信(データメモリ)
DATAMEM_SEQ_ID = 158
#対シーケンサ通信ハートビート(データメモリ)
DATAMEM_HB_ID = 159
#対シーケンサ通信ハートビート
PIOSEQ_HB_ID = 160
#稼動状態
DIV_KADOU_ID=161
#運転モード
DIV_UNTEN_ID=162
#PLG区分
DIV_PLGMODE_ID=163
#検査開始１本目
COIL_INIT_ID=164
#コイル情報無し
COIL_KEN_ID=165
COIL_DSP_ID=166
#コイル長異常
MAXLEN_KEN_ID=167
MAXLEN_DSP_ID=168
#PC収納盤温度異常
BAN_TEMP_1_ID=169
BAN_TEMP_2_ID=170
BAN_TEMP_3_ID=171
#カメラ台車位置
DAISYA_TOP_ID=172
DAISYA_BOT_ID=173
#カメラ台車ロックピン
LOCKPIN_TOP_ID=174
LOCKPIN_BOT_ID=175
#疵検実績生成失敗
ZI_CREATE_ERR_ID = 176
#疵検実績送信失敗
ZI_SEND_ERR_ID = 177
#PLG整合性異常
PLG_LENGTH_CHECK_ID = 178
#画像書き込み失敗
BCP_ERR_ID = 181
#稼動状態
DIV_SOGYO_ID=182
#FFサーバーイニシャル中
FF_CONNECT_ERR_ID=183

#=========================================================
# 共有メモリ情報 (1〜50まで)
#  MEM1_NAME	: 共有メモリ名
#  MEM1_SIZE	: サイズ
#=========================================================
[MEM]
MEM1_NAME = TO_COIL_TBL
MEM1_SIZE = 6144
MEM2_NAME = TO_SEQMEM_TBL
MEM2_SIZE = 512

#=========================================================
# プロセス情報 (1〜50まで)
#  TASK1	: 起動タスク名, 起動プロセス(0:通常 1:最小化 2:最大化 3:非表示)
#=========================================================
[EXECUTE]
TASK1=KS_SYSLOG, 1
TASK2=KS_EVTLOG, 1


#**************************************************************************************
# 各タスク 部
#**************************************************************************************
#=========================================================
# 統括管理
#=========================================================
[TO_DEFECT]
# 複眼ズレ対象外距離 [mm]
CAM_GAP_OTHER_LEN = 10

# 判定PCとのソケット定義
# Cliant01_Nameは、プログラム内で値を設定しなおす
[HT_RECV_TOP]
SAVE_IP		= 192.9.200.13
SAVE_PORT	= 10000
[HT_RECV_BOT]
SAVE_IP		= 192.9.200.13
SAVE_PORT	= 10001
# 表示PCとのソケット定義
[OP_SEND]
SAVE_IP 	= 192.9.200.13
SAVE_PORT 	= 10002

[SOGYO_MODE]
#操業条件
# 最小ライン速度チェック周期 [ms]
CHECK_INTERVAL = 1000
# 操業状態判定方法
# 「ライン速度がXmpm以下が、Y回続いた」の場合、低速操業認識。
# 「ライン速度がXmpm以下が、Y回続いた」の場合、ライン停止認識。
# 「ライン速度がXmpmより大きくが、Y回続いた」の場合、低速操業認識。
# 「ライン速度がXmpmより大きくが、Y回続いた」の場合、ライン稼動認識。
#    ※ 条件がかぶった場合は、下の項目に行くほど優先される。
#     ・Xが xxx_MPM。
#     ・Yが xxx_CNT(=最小ライン速度チェック周期で１回) (0で未チェック)

# 0mpmが4秒続いたら、一時停止 (ストップマーク発生)
UpToDown_SLOW_MPM = 5
UpToDown_SLOW_CNT = 10
# 0mpmが10秒続いたら、停止
UpToDown_STOP_MPM = 0
UpToDown_STOP_CNT = 30
# ちょっとでも動いたら即低速操業
DownToUp_SLOW_MPM = 0
DownToUp_SLOW_CNT = 1
# 5mpmより大きければ即ライン稼動認識
DownToUp_RUN_MPM = 5
DownToUp_RUN_CNT = 1

#=========================================================
# 対カメラコントローラー通信
#=========================================================
[TO_CAMERA]
#△
com=COM1
baud=96
parity=n
data=8
stop=1
to=off
dtr=off
rts=off
idsr=off
octs=off
#▲
#com=COM3
#baud=96
#parity=n
#data=8
#stop=1
#to=on
#dtr=on
#rts=on
#idsr=on
#octs=on

#=========================================================
# 対照明装置通信
#=========================================================
[TO_LIGHTS_TOP]
#照明のケーブル(制御信号)が悪い？ rts,octsをoffにする。
#△
com=COM3
baud=96
parity=e
data=7
stop=2
to=on
dtr=on
rts=off
idsr=on
octs=off
#▲
#com=COM3
#baud=96
#parity=n
#data=8
#stop=1
#to=on
#dtr=on
#rts=on
#idsr=on
#octs=on
[TO_LIGHTS_BOT]
#△
com=COM4
baud=96
parity=e
data=7
stop=2
to=on
dtr=on
rts=off
idsr=on
octs=off
#▲
#com=COM4
#baud=96
#parity=n
#data=8
#stop=1
#to=on
#dtr=on
#rts=on
#idsr=on
#octs=on

#=========================================================
# 対プロコン通信 (サーバー：疵検)
#   5CGLプロコンIP  133.113.62.55      
#   5CGL疵検IP      133.113.62.150   受信 5000  送信 5001
#   1CGLプロコンIP  133.113.62.15
#   1CGL疵検IP      133.113.62.151   受信 5000  送信 5001
#   1CAPLプロコンIP 128.51.5.1
#   1CAPL疵検IP     128.51.5.69      受信 8900  送信 8901
#=========================================================
[TO_PROCON_RECV]
SAVE_IP		= 133.113.62.151
SAVE_PORT	= 5000
[TO_PROCON_SEND]
SAVE_IP		= 133.113.62.151
SAVE_PORT	= 5001


#=========================================================
# 対ＦＦ通信 (サーバー：疵検)
#   ＦＦIP 10.24.98.1 
#	5CGL  受信 2871  送信 2821
#	1CGL  受信 2861  送信 2811
#	1CAPL 受信 2881  送信 2831
#  TO_FFSERV_RECV  : 受信関連
#  TO_FFSERV_SEND  : 送信関連
#=========================================================
[TO_FFSERV_RECV]
SAVE_IP		= 10.24.98.1
SAVE_PORT	= 2861
[TO_FFSERV_SEND]
SAVE_IP		= 10.24.98.1
SAVE_PORT	= 2811

#=========================================================
# シーケンサ情報定義
#  READADDR  	: 読込エリア開始アドレス
#  WRITEADDR 	: 書込エリア開始アドレス
#=========================================================
[TO_SEQDM]
READADDR  = D100
WRITEADDR = D400


#=========================================================
# 実績編集処理
#=========================================================
[TO_PUTDAT]
# カット実績時の統括管理側でのDB書き込みの最大待ち時間 [msec]
ADDDB_MAXWAITTIME=5000
# コイル実績確認のリトライ回数(20秒間隔でリトライ)
RETRYCOUNT=15
# コイル検索の対象期間
CHKCOILDATE=1



#=========================================================
# DB容量管理
#---------------------------
# タスク名セッションの中身
# SESSION_1	: セッション情報 (1〜10)
#---------------------------
# 各セッションの中身
# DB_ODBC	: DBセッション名
# DB_TRAN_SIZE_ERR_ID : トランザクションログサイズ増加時の異常機器ID (0時異常判定処理未実施)
# DB_TRAN_ERR_SIZE : トランザクションエラー認識サイズ [MByte]
# TIME_CYCLE	: 定周期実行周期 [分] (0時、チェック無し)
# TIME_SIZECHECK: DB容量チェック周期 [分] (0時、容量チェック無し)
# THREAD_COUNT	: DB容量低下時の削除スレッド数 (0時、容量低下で削除しない)
# DEL_RITU_1	: 削除スレッド実行開始容量 [%-2] (空き容量が指定パーセント以下になるとスレッド実行) (降順)
# 			スレッドの実行数と同じ数にする事
# 			最大9コまでとする。(指定した最後のスレッドが起動時は、ホントに容量がやばいと判断して、全力で消しに行くので注意する事)
#			(0時、チェック無し)
# TIME_MAX_WAIT	: 書込優先時の待ち時間 [ms]
# TIME_MIN_WAIT	: 削除優先時の待ち時間 [ms]
# LOG_SAVEDAY	: ログ保存日数 (0時、LOG_INF削除 実施無し)
# COIL_DEL_COUNT: 1回での削除コイル件数
# COILRESULT_TBL: コイル実績テーブル (疵検管理Noが主キーのテーブルを指定する事)
# COILRESULT_KEY: コイル実績テーブルの主キー (通常疵検管理No)
# 
#### 拡張
# ZI_1		: コイル実績の疵検管理Noを消す時に、一緒に消えていくテーブル (容量により削除) (1〜無限)		
# 			テーブル名, 主キー, サブキー(通常,疵No or ""), 一回の削除件数(0だと疵検管理No全部)
#  
# TI_1		: 日付で管理しているテーブル (定周期により削除) (1〜無限)
# 			テーブル名, 日付列(通常,登録日付), 保存日数
#=========================================================
[TI_DELETE]
SESSION_1 = TI_DELETE_A
SESSION_2 = TI_DELETE_B

# 厚手 独自仕様 ------>>>
# 無害Gr 削除スレッド実行数(1〜9)
LOWGR_THREAD_COUNT = 2
# ACCESS_KIZUSHARE_LOWGR_MGRのチェック周期 [分]
LOWGR_CYCLE = 60
# 何日以前のデータを強制削除するか [日]
LOWGR_DELEDAY = 3
# <<<--------------------


[TI_DELETE_A]
DB_ODBC = DB_A
DB_TRAN_SIZE_ERR_ID = 179
DB_TRAN_ERR_SIZE = 200000
TIME_CYCLE = 10
TIME_SIZECHECK = 5
THREAD_COUNT = 4
DEL_RITU_1 = 700
DEL_RITU_2 = 500
DEL_RITU_3 = 300
DEL_RITU_4 = 200
TIME_MAX_WAIT = 3000
TIME_MIN_WAIT = 100
LOG_SAVEDAY = 180
COIL_DEL_COUNT = 20
COILRESULT_TBL = COIL_RESULT
COILRESULT_KEY = 疵検管理No

#### 拡張
## コイル実績の疵検管理Noを消す時に、一緒に消えていくテーブル達
# テーブル名, 主キー, サブキー(通常,疵No or ""), 一回の削除件数(0だと疵検管理No全部)
ZI_1	= COIL_INF, 		疵検管理No,	,		0
ZI_2	= COIL_OUTINF,		疵検管理No,	,		0
ZI_3	= COIL_POSITION,	疵検管理No,	,		0
ZI_4	= DEFECT_INF_T,		疵検管理No,	疵No,		2000
ZI_5	= DEFECT_IMG_T,		疵検管理No,	疵No,		100
ZI_6	= DEFECT_ATTR0_T,	疵検管理No,	疵No,		500	
ZI_7	= DEFECT_ATTR1_T,	疵検管理No,	疵No,		500
ZI_8	= DEFECT_ATTR2_T,	疵検管理No,	疵No,		500
ZI_9	= DEFECT_INF_B,		疵検管理No,	疵No,		2000
ZI_10	= DEFECT_IMG_B,		疵検管理No,	疵No,		100
ZI_11	= DEFECT_ATTR0_B,	疵検管理No,	疵No,		500
ZI_12	= DEFECT_ATTR1_B,	疵検管理No,	疵No,		500
ZI_13	= DEFECT_ATTR2_B,	疵検管理No,	疵No,		500
ZI_14	= TINY_INF_T,		疵検管理No,	微小欠陥No,	1000
ZI_15	= TINY_INF_B,		疵検管理No,	微小欠陥No,	10	
ZI_16	= FRAME_IMG_T,		疵検管理No,	微小欠陥No,	1000
ZI_17	= FRAME_IMG_B,		疵検管理No,	微小欠陥No,	10
ZI_18	= BUF_PRO_S_ZISEKI,	疵検管理No,	,		0
ZI_19	= BUF_FF_S_ZISEKI,	疵検管理No,	,		0
ZI_20	= MAE_COIL_INF,		疵検管理No,	,		0
ZI_21	= MAE_DEFECT_INF,	疵検管理No,	疵No,		100
ZI_22	= MAE_DEFECT_IMG,	疵検管理No,	疵No,		50
ZI_23	= DUMMY_DEFECT_INF,	疵検管理No,	,		0
ZI_24	= ACCESS_KIZUSHARE_LOWGR_MGR,	疵検管理No,	,	0
ZI_25	= ACCESS_RCL_NEXT_COIL_INF,	疵検管理No,	,	0
ZI_26	= ACCESS_RCL_NEXT_DEFECT_INF,	疵検管理No,	疵No,	1000

## 日付で管理しているテーブル
# テーブル名, 日付列(通常,登録日付), 保存日数
TI_1	= BUF_PRO_R_COIL,	登録日付,	90
TI_2	= BUF_PRO_R_SAISUN,	登録日付,	90
TI_3	= BUF_PRO_R_CUT,	登録日付,	90
TI_4	= BUF_FF_R_MAEINF,	登録日付,	60
TI_5	= CAMERA_GAP_INF,	登録日付,	360


[TI_DELETE_B]
DB_ODBC = DB_B
DB_TRAN_SIZE_ERR_ID = 180
DB_TRAN_ERR_SIZE = 200000
TIME_CYCLE = 10
TIME_SIZECHECK = 5
THREAD_COUNT = 2
DEL_RITU_1 = 1000
DEL_RITU_2 = 400
TIME_MAX_WAIT = 3000
TIME_MIN_WAIT = 100
LOG_SAVEDAY = 180
COIL_DEL_COUNT = 20
COILRESULT_TBL = COIL_RESULT
COILRESULT_KEY = 疵検管理No

#### 拡張
## コイル実績の疵検管理Noを消す時に、一緒に消えていくテーブル達
# テーブル名, 主キー, サブキー(通常,疵No or ""), 一回の削除件数(0だと疵検管理No全部)
ZI_1	= COIL_INF, 		疵検管理No,	,		0
ZI_2	= COIL_OUTINF,		疵検管理No,	,		0
ZI_3	= COIL_POSITION,	疵検管理No,	,		0
ZI_4	= DEFECT_INF_T,		疵検管理No,	疵No,		2000
ZI_5	= DEFECT_IMG_T,		疵検管理No,	疵No,		100
ZI_6	= DEFECT_ATTR0_T,	疵検管理No,	疵No,		500	
ZI_7	= DEFECT_ATTR1_T,	疵検管理No,	疵No,		500
ZI_8	= DEFECT_ATTR2_T,	疵検管理No,	疵No,		500
ZI_9	= DEFECT_INF_B,		疵検管理No,	疵No,		2000
ZI_10	= DEFECT_IMG_B,		疵検管理No,	疵No,		100
ZI_11	= DEFECT_ATTR0_B,	疵検管理No,	疵No,		500
ZI_12	= DEFECT_ATTR1_B,	疵検管理No,	疵No,		500
ZI_13	= DEFECT_ATTR2_B,	疵検管理No,	疵No,		500
ZI_14	= TINY_INF_T,		疵検管理No,	微小欠陥No,	1000
ZI_15	= TINY_INF_B,		疵検管理No,	微小欠陥No,	10	
ZI_16	= FRAME_IMG_T,		疵検管理No,	微小欠陥No,	1000
ZI_17	= FRAME_IMG_B,		疵検管理No,	微小欠陥No,	10
ZI_18	= BUF_PRO_S_ZISEKI,	疵検管理No,	,		0
ZI_19	= BUF_FF_S_ZISEKI,	疵検管理No,	,		0
ZI_20	= MAE_COIL_INF,		疵検管理No,	,		0
ZI_21	= MAE_DEFECT_INF,	疵検管理No,	疵No,		100
ZI_22	= MAE_DEFECT_IMG,	疵検管理No,	疵No,		50
ZI_23	= DUMMY_DEFECT_INF,	疵検管理No,	,		0
ZI_24	= ACCESS_KIZUSHARE_LOWGR_MGR,	疵検管理No,	,	0
ZI_25	= ACCESS_RCL_NEXT_COIL_INF,	疵検管理No,	,	0
ZI_26	= ACCESS_RCL_NEXT_DEFECT_INF,	疵検管理No,	疵No,	1000

## 日付で管理しているテーブル
# テーブル名, 日付列(通常,登録日付), 保存日数
TI_1	= BUF_PRO_R_COIL,	登録日付,	90
TI_2	= BUF_PRO_R_SAISUN,	登録日付,	90
TI_3	= BUF_PRO_R_CUT,	登録日付,	90
TI_4	= BUF_FF_R_MAEINF,	登録日付,	60
TI_5	= CAMERA_GAP_INF,	登録日付,	360


#=========================================================
# DB同期管理
#---------------------------
# タスク名セッションの中身
## SESSION_1	: セッション情報 (1〜) [セッション名, TYPE]
# 		   TYPE : このセッションの動作定義 (同一タイプの最大登録数10個)
#     		0 ･･･ マスターの同期  (初期時)
#				TBLの形式１：テーブル名
#			1 ･･･ 実績の追加コピー (先テーブルの最新をキーに、それ以降の元テーブルのデータを先テーブルにコピー)
#				TBLの形式１：テーブル名,  1回の追加件数,  主キー1(必須),  主キー2(空白可),  主キー3(空白可)
#			2 ･･･ 実績の移動
#				TBLの形式１：テーブル名,  1回の移動件数,  主キー1(必須),  主キー2(空白可)
#			3 ･･･ 実績の完全同期 (双方のテーブルで、キーが無い項目を補間しあう)  (初期時,A→Bにデータがコピー)
#				TBLの形式１：テーブル名,  1回の追加件数,  主キー1(必須),  主キー2(空白可),  主キー3(空白可)
#---------------------------
# 各セッションの中身
# DB_ODBC_A	: DBセッション名
# DB_ODBC_B	: DBセッション名
# LINK_PATH_AB	: A系のDBに定義されているリンクサーバー経由でB系アクセスする時のパス "[リンクサーバー名].データベース名.dbo."
# LINK_PATH_BA	: B系のDBに定義されているリンクサーバー経由でA系アクセスする時のパス "[リンクサーバー名].データベース名.dbo."
#   通常の定周期実行時は、 A→Bの流れでデータが処理される
#   このタスクを使用する場合は、必ずDBのリンクサーバーの定義をする事。
#    ・A系には、B系のサーバーを追加。B系には、A系のサーバーを追加する事。
#    ・リンクサーバーの定義は、 プロパイダ[SQL Native Client、Microsoft OLE DB Pro…SQLServer]
#				製品名[mySQLServer]    データソース[IPアドレス]   カタログ[DB名]   セキュリティでログイン名とパスを設定する事
#
# TIME_FAST	: 初期実行までの時間 (0:定周期無し) [分]
# TIME_INTERVAL	: ２回目以降の実行周期 [分]
# MAIL_KEY	: メールスロット受信時に第2引数と一致した場合、強制的に実行される。 (0:未実施)
# T_1		: テーブル名 (最大50テーブル)
#
# FACT_KS_EQALDB_01の起動受信時
#     data[0]   0:A→B    1:B→A
#     data[1]  任意の値 (0:無視  1〜:MAIL_KEYと一致した場合、強制的に実行される。
#
#=========================================================
[KS_EQALDB]
SESSION_1 = KS_EQALDB_EQAL, 0
SESSION_2 = KS_EQALDB_MOVE, 2

[KS_EQALDB_EQAL]
DB_ODBC_A	= DB_A
DB_ODBC_B	= DB_B
LINK_PATH_AB	= [TIKUSEKISUB].DATABASE_1CGL.dbo.
LINK_PATH_BA	= [TIKUSEKI].DATABASE_1CGL.dbo.
TIME_FAST	= 1440
TIME_INTERVAL	= 60
MAIL_KEY	= 1
# マスター同期対象テーブル
T_1	= STATUS_MASTER
T_2	= STATUS_INF
T_3	= LOG_MASTER
T_4	= PC_MASTER
T_5	= PC_INF
T_6	= COMMON_MASTER
T_7	= ATTR_NAME
T_8	= TYPE_NAME
T_9	= GRADE_NAME
T_10	= SCODE_MASTER
T_11	= SCODE_JUDGE
T_12	= SCODE_OUTPUT
T_13	= PCODE_MASTER
T_14	= PCODE_JUDGE
T_15	= PCODE_OUTPUT
T_16	= PALL_OUTPUT
T_17	= PCOMMON_OUTPUT
T_18	= ALLCODE_OUTPUT
T_19	= PARAM_COMMON
T_20	= PARAM_SCODE
T_21	= PARAM_CAMSET
T_22	= PARAM_CAMSET_SCODE
T_23	= PARAM_CAMSET_ANGLE
T_24	= PARAM_CAMANGLE_SCODE
T_25	= PARAM_CAMSET_ANGLE_SCODE
T_26	= ROLL_INFO
T_27	= PCINFO_DESC
T_28	= MAE_TYPE_NAME
T_29	= MAE_GRADE_NAME


[KS_EQALDB_MOVE]
DB_ODBC_A	= DB_B
DB_ODBC_B	= DB_A
LINK_PATH_AB	= [TIKUSEKI].DATABASE_1CGL.dbo.
LINK_PATH_BA	= [TIKUSEKISUB].DATABASE_1CGL.dbo.
TIME_FAST	= 1440
TIME_INTERVAL	= 360
MAIL_KEY	= 2
#実績移動
T_1		= LOG_INF,		500,	登録日付, 	AutoNo
T_2		= COIL_INF,		500,	疵検管理No
T_3		= COIL_OUTINF,		500,	ID, 		No
T_4		= COIL_POSITION,	500,	疵検管理No,	ID
T_5		= DEFECT_INF_T,		500,	疵検管理No,	疵No
T_6		= DEFECT_IMG_T,		50,	疵検管理No,	疵No
T_7		= DEFECT_ATTR0_T,	300,	疵検管理No,	疵No
T_8		= DEFECT_ATTR1_T,	300,	疵検管理No,	疵No
T_9		= DEFECT_ATTR2_T,	500,	疵検管理No,	疵No	
T_10		= DEFECT_INF_B,		500,	疵検管理No,	疵No
T_11		= DEFECT_IMG_B,		50,	疵検管理No,	疵No
T_12		= DEFECT_ATTR0_B,	300,	疵検管理No,	疵No
T_13		= DEFECT_ATTR1_B,	300,	疵検管理No,	疵No
T_14		= DEFECT_ATTR2_B,	300,	疵検管理No,	疵No
T_15		= TINY_INF_T,		500,	疵検管理No,	微小欠陥No
T_16		= TINY_INF_B,		10,	疵検管理No,	微小欠陥No
T_17		= FRAME_IMG_T,		500,	疵検管理No,	微小欠陥No
T_18		= FRAME_IMG_B,		10,	疵検管理No,	微小欠陥No
T_19		= BUF_PRO_R_COIL,	100,	ID
T_20		= BUF_PRO_R_SAISUN,	100,	ID
T_21		= BUF_PRO_R_CUT,	100,	ID
T_22		= BUF_PRO_S_ZISEKI,	100,	ID
T_23		= BUF_FF_S_ZISEKI,	100,	ID
T_24		= BUF_FF_R_MAEINF,	100,	ID
T_25		= MAE_COIL_INF,		100,	疵検管理No,	ID
T_26		= MAE_DEFECT_INF,	500,	疵検管理No,	疵No
T_27		= MAE_DEFECT_IMG,	100,	疵検管理No,	疵No
T_28		= DUMMY_DEFECT_INF,		1000,		疵検管理No
T_29		= ACCESS_KIZUSHARE_LOWGR_MGR,	10,		疵検管理No
T_30		= ACCESS_RCL_NEXT_COIL_INF,	10,		疵検管理No
T_31		= ACCESS_RCL_NEXT_DEFECT_INF,	2000,		疵検管理No,	疵No
T_32		= CAMERA_GAP_INF,	1000,	登録日付,	カメラセット
T_33		= COIL_RESULT,		500,	疵検管理No
